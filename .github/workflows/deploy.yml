name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]
    paths: ["car-rental-service/**"]
  # Allow manual triggering
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REGISTRY: 182399689800.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REPOSITORY: se-project
  ECS_SERVICE: car-rental-service
  ECS_CLUSTER: se-project
  ECS_TASK_DEFINITION: ./car-rental-service/.aws/task-definition.json
  CONTAINER_NAME: car-rental-service
  AWS_ACCESS_KEY_ID: AKIASU566MREKZGVE23B

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy Car Rental Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:latest ./car-rental-service
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:latest
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY}}:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
